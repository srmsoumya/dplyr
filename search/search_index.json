{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dplyr Dplyr API for Python Features Read JSON Filter data based on keys Select data based on keys Look at the head & tail Add additional data points Installation python -m pip install dplyr Examples from dplyr import Dplyr blob = [{'a': 1}, {'a': 2}] data = Dplyr(blob) data.pipe(lambda x: x['a']) .head() .collect()","title":"Index"},{"location":"#dplyr","text":"Dplyr API for Python","title":"Dplyr"},{"location":"#features","text":"Read JSON Filter data based on keys Select data based on keys Look at the head & tail Add additional data points","title":"Features"},{"location":"#installation","text":"python -m pip install dplyr","title":"Installation"},{"location":"#examples","text":"from dplyr import Dplyr blob = [{'a': 1}, {'a': 2}] data = Dplyr(blob) data.pipe(lambda x: x['a']) .head() .collect()","title":"Examples"},{"location":"api/dplyr/","text":"Dplyr __init__ ( self , blob ) special Initialise the container with a blob or []. Parameters: Name Type Description Default blob None List[Dict] required Returns: Type Description Int Source code in dplyr/base.py def __init__ ( self , blob : None ): \"\"\"Initialise the container with a blob or []. Arguments: blob: List[Dict] Returns: Int \"\"\" self . blob = [] if blob is None else blob pipe ( self , * fns ) PIPE: Apply multiple functions to data in the pipeline. Parameters: Name Type Description Default fns List of functions to be applied () Returns: Type Description Dplyr object Source code in dplyr/base.py def pipe ( self , * fns ): \"\"\"PIPE: Apply multiple functions to data in the pipeline. Arguments: fns: List of functions to be applied Returns: Dplyr object \"\"\" data = copy . deepcopy ( self . blob ) for fn in fns : data = [ b for b in data if fn ( b )] return Dplyr ( data )","title":"Dplyr"},{"location":"api/dplyr/#dplyr","text":"","title":"Dplyr"},{"location":"api/dplyr/#dplyr.base.Dplyr.__init__","text":"Initialise the container with a blob or []. Parameters: Name Type Description Default blob None List[Dict] required Returns: Type Description Int Source code in dplyr/base.py def __init__ ( self , blob : None ): \"\"\"Initialise the container with a blob or []. Arguments: blob: List[Dict] Returns: Int \"\"\" self . blob = [] if blob is None else blob","title":"__init__()"},{"location":"api/dplyr/#dplyr.base.Dplyr.pipe","text":"PIPE: Apply multiple functions to data in the pipeline. Parameters: Name Type Description Default fns List of functions to be applied () Returns: Type Description Dplyr object Source code in dplyr/base.py def pipe ( self , * fns ): \"\"\"PIPE: Apply multiple functions to data in the pipeline. Arguments: fns: List of functions to be applied Returns: Dplyr object \"\"\" data = copy . deepcopy ( self . blob ) for fn in fns : data = [ b for b in data if fn ( b )] return Dplyr ( data )","title":"pipe()"}]}